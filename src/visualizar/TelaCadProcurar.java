/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visualizar;

import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelos.CadPessoas;
import modelos.Digitadores;
import modelos.banco.CadPessoasBanco;

/**
 *
 * @author renan
 */
public class TelaCadProcurar extends javax.swing.JInternalFrame {

    private int[] ids;
    private String[] laudo;
    private String[] atendimentoDtHr;
    private Digitadores digitador;
    private List<CadPessoas> listCad;

    /**
     * Creates new form TelaCadProcurar
     */
    public TelaCadProcurar() {
        initComponents();
    }

    public TelaCadProcurar(Digitadores digitador) {
        initComponents();
        this.digitador = digitador;

        makeTabela(this.digitador);
        abrirCadastro.setText("Visualizar Cadastro");
        editarCadastro.setText("Editar Cadastro");
        deletarCadastro.setText("Deletar Cadastro");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        abrirCadastro = new javax.swing.JMenuItem();
        editarCadastro = new javax.swing.JMenuItem();
        deletarCadastro = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jNome = new javax.swing.JTextField();
        jNascimento = new javax.swing.JFormattedTextField();
        jLabel56 = new javax.swing.JLabel();
        jSexoM = new javax.swing.JCheckBox();
        jSexoF = new javax.swing.JCheckBox();
        jProcurar = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jCns = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        jCadastros = new javax.swing.JTable();

        jPopupMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopupMenu2MouseClicked(evt);
            }
        });

        abrirCadastro.setText("jMenuItem1");
        abrirCadastro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                abrirCadastroMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                abrirCadastroMouseReleased(evt);
            }
        });
        abrirCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(abrirCadastro);

        editarCadastro.setText("jMenuItem2");
        editarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(editarCadastro);

        deletarCadastro.setText("jMenuItem3");
        deletarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(deletarCadastro);

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Procurar Cadastrados");

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel2MouseReleased(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Procurar Cadastros"));
        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel12MouseReleased(evt);
            }
        });

        jLabel53.setText("Nome");

        jLabel54.setText("Nascimento");

        jLabel55.setText("CNS/CPF");

        try {
            jNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNascimentoActionPerformed(evt);
            }
        });
        jNascimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jNascimentoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jNascimentoKeyReleased(evt);
            }
        });

        jLabel56.setText("Sexo");

        jSexoM.setText("M");
        jSexoM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSexoMActionPerformed(evt);
            }
        });

        jSexoF.setText("F");
        jSexoF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSexoFActionPerformed(evt);
            }
        });

        jProcurar.setText("Procurar");
        jProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jProcurarActionPerformed(evt);
            }
        });

        jButton16.setText("Limpar");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jCns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCnsKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53))
                .addGap(29, 29, 29)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel54)
                    .addComponent(jNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel56)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel55))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jSexoM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSexoF)
                        .addGap(21, 21, 21)
                        .addComponent(jCns, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton16)
                .addGap(48, 48, 48)
                .addComponent(jProcurar)
                .addGap(66, 66, 66))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel54)
                    .addComponent(jLabel56)
                    .addComponent(jLabel55))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSexoM)
                    .addComponent(jSexoF)
                    .addComponent(jCns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jProcurar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCadastros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nome", "Nascimento", "Sexo", "CNS/CPF"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jCadastros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCadastrosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCadastrosMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCadastrosMouseReleased(evt);
            }
        });
        jScrollPane8.setViewportView(jCadastros);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Encontra todos os resultados do respectivo Digitador ou todos os
     * resultados se for o Admin
     *
     * @param digitador
     */
    private boolean makeTabela(Digitadores digitador) {
        int i = 0;
        int tamanho;
        CadPessoasBanco cpb = new CadPessoasBanco();

        if (listCad == null) {
            if (!"Admin".equals(digitador.getNome())) {
                listCad = new ArrayList<>();
                for (CadPessoas c : cpb.procurar()) {
                    if (c.getDigitadores().getId() == digitador.getId()) {
                        listCad.add(c); //lista que contém apenas os cadastros do digitador
                    }
                }
            } else {
                listCad = cpb.procurar();   //lista com todos os cadastros
            }
        }
        tamanho = listCad.toArray().length;

        ids = new int[tamanho]; // seta o tamanho do array
        laudo = new String[tamanho];
        atendimentoDtHr = new String[tamanho];

        String newNasc;
        String genero;
        String nasc;

        //apagar tudo antes de procurar denovo
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setNumRows(0);
        for (CadPessoas c : listCad) {
            // ajeita a data que vem do banco
            nasc = c.getNascimento();
            newNasc = nasc.substring(8, 10) + "/" + nasc.substring(5, 7) + "/" + nasc.substring(0, 4);
            genero = c.getSexo().equals("M") ? "Masculino" : "Feminino";

            atualizarTabela(c, i, newNasc, genero);
            i++;
        }
        return i != 0;
    }

    /**
     * Verifica as caixas que contém informação e vai no banco procurar e buscar
     * todos os resultados equivalentes. Após verifica os resultados e coloca na
     * tabela os que realmente contém os dados informados
     *
     * @param digitador
     * @param confNome
     * @param confNasc
     * @param confSexo
     * @param confCns
     *
     */
    private boolean makeTabelaPesquisa(String confNome, String confNasc, String confSexo, String confCns) {
        int i = 0;
        int tamanho;
        List<CadPessoas> cp = new ArrayList<>();

        boolean nome = false;
        boolean nasci = false;
        boolean sexo = false;
        boolean cns = false;

        String newNasc;
        String genero;
        String nasc;
        String confNomezin = confNome.toLowerCase();    //Nome em minusculo para verificação
        String cadNomezin;  //Variável para guardar o nome da pessoa em minusculo
        boolean temCad = false; //Variavel para saber se há cadastro

        //Verifica se os valores não estão em branco e procura
        if (!confNome.equals("")) {
            nome = true;
        }
        if (!confNasc.equals("")) {
            nasci = true;
        }
        if (!confSexo.equals("")) {
            sexo = true;
        }
        if (!confCns.equals("")) {
            cns = true;
        }

        for (CadPessoas cad : listCad) {
            cadNomezin = cad.getNome().toLowerCase();
            boolean diferente = false;

            if (cns && !cad.getCns().contains(confCns)) {
                diferente = true;
            } else if (nome && !cadNomezin.contains(confNomezin)) {
                diferente = true;
            } else if (sexo && !cad.getSexo().equals(confSexo)) {
                diferente = true;
            } else if (nasci && !cad.getNascimento().equals(confNasc)) {
                diferente = true;
            }
            if (!diferente) {
                cp.add(cad);
            }
        }

        tamanho = cp.toArray().length;
        ids = new int[tamanho]; // seta o tamanho do array
        atendimentoDtHr = new String[tamanho];
        laudo = new String[tamanho];

        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setNumRows(0);

        //Coloca somente os itens iguais/parecidos ao pesquisado na tabela
        for (CadPessoas c : cp) {
            nasc = c.getNascimento();
            newNasc = nasc.substring(8, 10) + "/" + nasc.substring(5, 7) + "/" + nasc.substring(0, 4);
            genero = c.getSexo().equals("M") ? "Masculino" : "Feminino";

            temCad = atualizarTabela(c, i, newNasc, genero);

            i++;
        }

        return temCad;
    }

    /**
     * Coloca o cadastro que é exatamente ou parecido ao cadastro procurado
     *
     * @param c
     * @param i
     * @param newNasc
     * @param genero
     * @return
     */
    private boolean atualizarTabela(CadPessoas c, int i, String newNasc, String genero) {
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        ids[i] = c.getId();
        laudo[i] = c.getLaudo();
        atendimentoDtHr[i] = c.getAtendimentodthr();
        dtm.addRow(new Object[]{i + 1, c.getNome(), newNasc, genero, c.getCns()});
        return true;
    }

    /**
     * Arruma o valores das caixas para fazer a pesquisa especifica dos valores
     * que contém informação
     */
    public void pesquisaEspecifica() {
        String sexo = "";
        if (jSexoM.isSelected()) {
            sexo = "M";
        } else if (jSexoF.isSelected()) {
            sexo = "F";
        }
        String nasc = jNascimento.getText();
        String newNasc = "";
        if (jNascimento.getValue() != null) {
            newNasc = nasc.substring(6, 10) + "-" + nasc.substring(3, 5) + "-" + nasc.substring(0, 2);
        }
        if (!makeTabelaPesquisa(jNome.getText(), newNasc, sexo, jCns.getText())) {
            JOptionPane.showMessageDialog(this, "Não há cadastros com essas informações.", "Erro",
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    private void jProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jProcurarActionPerformed
        // TODO add your handling code here:
        if (jNome.getText().equals("") && jNascimento.getText().equals("  /  /    ") && jSexoM.isSelected() == false
                && jSexoF.isSelected() == false && jCns.getText().equals("")) {
            if (!makeTabela(digitador)) {
                JOptionPane.showMessageDialog(this, "Não há cadastros.", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            pesquisaEspecifica();
        }
    }//GEN-LAST:event_jProcurarActionPerformed

    private void jSexoFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSexoFActionPerformed
        // TODO add your handling code here:
        if (jSexoM.isSelected()) {
            jSexoM.setSelected(false);
        }
    }//GEN-LAST:event_jSexoFActionPerformed

    private void jSexoMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSexoMActionPerformed
        // TODO add your handling code here:
        if (jSexoF.isSelected()) {
            jSexoF.setSelected(false);
        }
    }//GEN-LAST:event_jSexoMActionPerformed

    private void jNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNascimentoActionPerformed

    private void jNascimentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNascimentoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jNascimentoKeyReleased

    private void jNascimentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNascimentoKeyPressed
        // TODO add your handling code here:
        TelaCadCadastrar.apagarJFormatted(jNascimento, evt.getKeyCode());
    }//GEN-LAST:event_jNascimentoKeyPressed

    private void jCadastrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMouseClicked
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            //Pegando os valores da tabela
            DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
            String tabNome = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 1);
            String tabNasc = (String) (dtm.getValueAt(jCadastros.getSelectedRow(), 2));
            String tabSexo = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 3);
            String tabCns = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 4);

            jNome.setText(tabNome);
            jNascimento.setText(tabNasc);
            if (tabSexo.equals("Masculino")) {
                jSexoM.setSelected(true);
                jSexoF.setSelected(false);
            } else {
                jSexoF.setSelected(true);
                jSexoM.setSelected(false);
            }
            jCns.setText(tabCns);
        }
    }//GEN-LAST:event_jCadastrosMouseClicked

    private void jCnsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCnsKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisaEspecifica();
        }
    }//GEN-LAST:event_jCnsKeyPressed

    private void jCadastrosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jCadastrosMouseReleased

    private void jCadastrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCadastrosMousePressed

    private void jPanel12MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel12MouseReleased

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MousePressed

    private void jPanel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseReleased

    private void jPopupMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPopupMenu2MouseClicked

    private void abrirCadastroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrirCadastroMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_abrirCadastroMouseReleased

    private void abrirCadastroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrirCadastroMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_abrirCadastroMousePressed
    /**
     * Pega o valores da linha selecionada da JTable e formata nos conformes
     *
     * @return
     */
    private CadPessoas getFormatedCadPessoa() {
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        CadPessoas cp = new CadPessoas();
        int id = (int) (dtm.getValueAt(jCadastros.getSelectedRow(), 0)) - 1;

        String tabNome = jNome.getText();
        String tabNasc = jNascimento.getText();
        String tabSexo = jSexoM.isSelected() ? "M" : "F";
        String tabCns = jCns.getText();

        cp.setId(ids[id]);
        cp.setNome(tabNome);
        cp.setNascimento(tabNasc);
        cp.setSexo(tabSexo);
        cp.setCns(tabCns);
        cp.setLaudo(laudo[id]);
        cp.setAtendimentodthr(atendimentoDtHr[id]);
        return cp;
    }

    private void abrirCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            //Pegando os valores da tabela
            CadPessoas cp = getFormatedCadPessoa();
            TelaCadCadastrar tcc = new TelaCadCadastrar(cp, false);
            getParent().add(tcc);
            tcc.setVisible(true);
        }
    }//GEN-LAST:event_abrirCadastroActionPerformed

    /**
     * Limpa os valores das caixas e tira as seleções para fazer uma nova busca
     */
    private void Limpar() {
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setRowCount(0);

        jNome.setText("");
        jNascimento.setValue(null);
        jSexoM.setSelected(false);
        jSexoF.setSelected(false);
        jCns.setText("");
    }

    private void deletarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            int escolha = JOptionPane.showConfirmDialog(this, "Tudo deste registro será apagado.\n\nDeseja realmente apagar "
                    + "este registro?", "Alerta", 0, JOptionPane.WARNING_MESSAGE);

            if (escolha == 0) {
                DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
                CadPessoas cp = new CadPessoas();
                CadPessoasBanco cpb = new CadPessoasBanco();
                int id = (int) (dtm.getValueAt(jCadastros.getSelectedRow(), 0)) - 1;
                cp.setId(ids[id]);

                if (cpb.deletar(cp)) {
                    listCad = null;
                    Limpar();
                    JOptionPane.showMessageDialog(this, "Deletado com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível deletar este registro. Tente novamente.",
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_deletarCadastroActionPerformed

    private void editarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            //Pegando os valores da tabela
            CadPessoas cp = getFormatedCadPessoa();
            TelaCadCadastrar tcc = new TelaCadCadastrar(cp, true);
            getParent().add(tcc);
            tcc.setVisible(true);

            listCad = null;
            Limpar();
        }
    }//GEN-LAST:event_editarCadastroActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        Limpar();
    }//GEN-LAST:event_jButton16ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirCadastro;
    private javax.swing.JMenuItem deletarCadastro;
    private javax.swing.JMenuItem editarCadastro;
    private javax.swing.JButton jButton16;
    private javax.swing.JTable jCadastros;
    private javax.swing.JTextField jCns;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JFormattedTextField jNascimento;
    private javax.swing.JTextField jNome;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JButton jProcurar;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JCheckBox jSexoF;
    private javax.swing.JCheckBox jSexoM;
    // End of variables declaration//GEN-END:variables
}
