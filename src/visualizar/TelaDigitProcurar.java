/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visualizar;

import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelos.CadPessoas;
import modelos.Digitadores;
import modelos.banco.CadPessoasBanco;
import modelos.banco.DigitadoresBanco;

/**
 *
 * @author renan
 */
public class TelaDigitProcurar extends javax.swing.JInternalFrame {

    private int[] ids;
    private String[] contato;
    private String[] endereco;
    private Digitadores adm;
    private List<Digitadores> listDigi;

    /**
     * Creates new form TelaCadProcurar
     *
     * @param adm
     */
    public TelaDigitProcurar(Digitadores adm) {
        initComponents();
        this.adm = adm;
        makeTabela();
        abrirCadastro.setText("Visualizar Digitador");
        editarCadastro.setText("Editar Digitador");
        deletarCadastro.setText("Deletar Digitador");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        abrirCadastro = new javax.swing.JMenuItem();
        editarCadastro = new javax.swing.JMenuItem();
        deletarCadastro = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jNome = new javax.swing.JTextField();
        jNascimento = new javax.swing.JFormattedTextField();
        jLabel56 = new javax.swing.JLabel();
        jSexoM = new javax.swing.JCheckBox();
        jSexoF = new javax.swing.JCheckBox();
        jProcurar = new javax.swing.JButton();
        jLimpar = new javax.swing.JButton();
        jRg = new javax.swing.JTextField();
        jCpf = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jCadastros = new javax.swing.JTable();

        jPopupMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPopupMenu2MouseClicked(evt);
            }
        });

        abrirCadastro.setText("jMenuItem1");
        abrirCadastro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                abrirCadastroMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                abrirCadastroMouseReleased(evt);
            }
        });
        abrirCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(abrirCadastro);

        editarCadastro.setText("jMenuItem2");
        editarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(editarCadastro);

        deletarCadastro.setText("jMenuItem3");
        deletarCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarCadastroActionPerformed(evt);
            }
        });
        jPopupMenu2.add(deletarCadastro);

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Procurar Digitadores");

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel2MouseReleased(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Procurar Cadastros"));
        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel12MouseReleased(evt);
            }
        });

        jLabel53.setText("Nome");

        jLabel54.setText("Nascimento");

        jLabel55.setText("RG");

        try {
            jNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNascimentoActionPerformed(evt);
            }
        });
        jNascimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jNascimentoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jNascimentoKeyReleased(evt);
            }
        });

        jLabel56.setText("Sexo");

        jSexoM.setText("M");
        jSexoM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSexoMActionPerformed(evt);
            }
        });

        jSexoF.setText("F");
        jSexoF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSexoFActionPerformed(evt);
            }
        });

        jProcurar.setText("Procurar");
        jProcurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jProcurarActionPerformed(evt);
            }
        });

        jLimpar.setText("Limpar");
        jLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLimparActionPerformed(evt);
            }
        });

        jRg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jRgKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jRgKeyReleased(evt);
            }
        });

        try {
            jCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jCpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCpfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCpfKeyReleased(evt);
            }
        });

        jLabel10.setText("CPF");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel53))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54)
                            .addComponent(jNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel56)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jSexoM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSexoF)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRg, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel55))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addComponent(jLimpar)
                        .addGap(40, 40, 40)))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProcurar)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel54)
                    .addComponent(jLabel56)
                    .addComponent(jLabel55)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSexoM)
                    .addComponent(jSexoF)
                    .addComponent(jRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLimpar)
                    .addComponent(jProcurar)))
        );

        jCadastros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Nome", "Nascimento", "Sexo", "RG", "CPF", "Cadastros"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jCadastros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCadastrosMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCadastrosMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCadastrosMouseReleased(evt);
            }
        });
        jScrollPane8.setViewportView(jCadastros);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Busca todos os Digitadores e os coloca na Jtable
     * 
     * @return 
     */
    private boolean makeTabela() {
        int i = 0;
        int tamanho;
        boolean temDg = false;
        DigitadoresBanco db = new DigitadoresBanco();

        if (listDigi == null) {
            listDigi = db.procurar();
        }
        tamanho = listDigi.toArray().length;

        ids = new int[tamanho]; // seta o tamanho do array
        contato = new String[tamanho];
        endereco = new String[tamanho];

        String newNasc;
        String genero;
        String nasc;

        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setNumRows(0);
        for (Digitadores d : listDigi) {
            nasc = d.getNascimento(); // ajeita a data que vem do banco
            newNasc = nasc.substring(8, 10) + "/" + nasc.substring(5, 7) + "/" + nasc.substring(0, 4);
            genero = d.getSexo().equals("M") ? "Masculino" : "Feminino";

            //Atualiza a tabela
            temDg = atualizarTabela(d, i, newNasc, genero);

            if (!"Admin".equals(d.getNome())) {
                i++;
            }
        }
        return temDg;
    }

    /**
     * Verifica as caixas que contém informação e vai no banco
     * procurarEspecificoDigit e buscar todos os resultados equivalentes. Após
     * verifica os resultados e coloca na tabela os que realmente contém os
     * dados informados
     * 
     * @param confNome
     * @param confNasc
     * @param confSexo
     * @param confRg
     * @param confCpf
     * @return 
     */
    private boolean makeTabelaPesquisa(String confNome, String confNasc, String confSexo, String confRg, String confCpf) {
        int i = 0;
        int tamanho;
        List<Digitadores> dg = new ArrayList<>();

        boolean nome = false;
        boolean nasci = false;
        boolean sexo = false;
        boolean rg = false;
        boolean cpf = false;

        String newNasc;
        String genero;
        String nasc;
        String confNomezin = confNome.toLowerCase();    //Nome em minusculo para verificação
        String dgNomezin;  //Variável para guardar o nome da pessoa em minusculo
        boolean temDg = false; //Variavel para saber se há digitador

        //Verifica se os valores não estão em branco e procura
        if (!confNome.equals("")) {
            nome = true;
        }
        if (!confNasc.equals("")) {
            nasci = true;
        }
        if (!confSexo.equals("")) {
            sexo = true;
        }
        if (!confRg.equals("")) {
            rg = true;
        }
        if (!confCpf.equals("")) {
            cpf = true;
        }

        //Se os dados do digitador forem diferentes aos pesquisados ele não é adicionado a lista
        for (Digitadores digi : listDigi) {
            dgNomezin = digi.getNome().toLowerCase();

            if (!"Admin".equals(digi.getNome())) {  //Não pode pesquisar o Admin
                boolean diferente = false;

                if (cpf && !digi.getCpf().equals(confCpf)) {
                    diferente = true;
                } else if (rg && !digi.getRg().contains(confRg)) {
                    diferente = true;
                } else if (nome && !dgNomezin.contains(confNomezin)) {
                    diferente = true;
                } else if (sexo && !digi.getSexo().equals(confSexo)) {
                    diferente = true;
                } else if (nasci && !digi.getNascimento().equals(confNasc)) {
                    diferente = true;
                }
                if (!diferente) {
                    dg.add(digi);
                }
            }
        }

        tamanho = dg.toArray().length;
        ids = new int[tamanho]; // seta o tamanho do array
        contato = new String[tamanho];
        endereco = new String[tamanho];

        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setNumRows(0);

        //Coloca somente os itens iguais/parecidos ao pesquisado na tabela
        for (Digitadores d : dg) {
            nasc = d.getNascimento();
            newNasc = nasc.substring(8, 10) + "/" + nasc.substring(5, 7) + "/" + nasc.substring(0, 4);
            genero = d.getSexo().equals("M") ? "Masculino" : "Feminino";

            temDg = atualizarTabela(d, i, newNasc, genero);

            if (!"Admin".equals(d.getNome())) {
                i++;
            }
        }

        return temDg;
    }

    /**
     *
     * Retorna a quantidade de Cadastros do Digitador
     *
     * @param d
     * @return
     */
    private int qntCadDigit(Digitadores d) {
        CadPessoasBanco cpb = new CadPessoasBanco();
        List<CadPessoas> digi = cpb.procurarEspecificoDigit(d);
        return digi.toArray().length;
    }

    /**
     * Atualiza a tabela com os dados informados e validados da pesquisa
     *
     * @param d
     * @param i
     * @param newNasc
     * @param genero
     * @return
     */
    private boolean atualizarTabela(Digitadores d, int i, String newNasc, String genero) {
        boolean temDg = true;
        if (!"Admin".equals(d.getNome())) {
            DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
            int qntCad = qntCadDigit(d);
            ids[i] = d.getId();
            contato[i] = d.getContato();
            endereco[i] = d.getEndereco();
            String newCpf = d.getCpf().substring(0, 3) + "." + d.getCpf().substring(3, 6) + "." + d.getCpf().substring(6, 9)
                    + "-" + d.getCpf().substring(9, 11);

            dtm.addRow(new Object[]{i + 1, d.getNome(), newNasc, genero, d.getRg(), newCpf, qntCad});
        }
        //Para mostrar a mensagem de erro qnd so o admin aparecer
        if (ids.length == 1 && d.getNome().equals("Admin")) {
            temDg = false;
        }
        return temDg;
    }

    /**
     * Arruma o valores das caixas para fazer a pesquisa especifica dos valores
     * que contém informação
     */
    private void pesquisarEspecifico() {
        String sexo = "";
        if (jSexoM.isSelected()) {
            sexo = "M";
        } else if (jSexoF.isSelected()) {
            sexo = "F";
        }
        String nasc = jNascimento.getText();
        String newNasc = "";
        if (jNascimento.getValue() != null) {   //verifica se foi inserido algum valor
            newNasc = nasc.substring(6, 10) + "-" + nasc.substring(3, 5) + "-" + nasc.substring(0, 2);
        }
        String cpf = jCpf.getText();
        String newCpf = "";
        if (jCpf.getValue() != null) {
            newCpf = cpf.substring(0, 3) + cpf.substring(4, 7) + cpf.substring(8, 11) + cpf.substring(12, 14);
        }

        if (!makeTabelaPesquisa(jNome.getText(), newNasc, sexo, jRg.getText(), newCpf)) {
            JOptionPane.showMessageDialog(this, "Não há cadastros com essas informações.", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void jProcurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jProcurarActionPerformed
        // TODO add your handling code here:
        if (jNome.getText().equals("") && jNascimento.getText().equals("  /  /    ") && jSexoM.isSelected() == false
                && jSexoF.isSelected() == false && jRg.getText().equals("") && jCpf.getText().equals("   .   .   -  ")) {
            if (!makeTabela()) {
                JOptionPane.showMessageDialog(this, "Não há cadastros.", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            pesquisarEspecifico();
        }
    }//GEN-LAST:event_jProcurarActionPerformed

    private void jSexoFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSexoFActionPerformed
        // TODO add your handling code here:
        if (jSexoM.isSelected()) {
            jSexoM.setSelected(false);
        }
    }//GEN-LAST:event_jSexoFActionPerformed

    private void jSexoMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSexoMActionPerformed
        // TODO add your handling code here:
        if (jSexoF.isSelected()) {
            jSexoF.setSelected(false);
        }
    }//GEN-LAST:event_jSexoMActionPerformed

    private void jNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNascimentoActionPerformed

    private void jNascimentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNascimentoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jNascimentoKeyReleased

    private void jNascimentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNascimentoKeyPressed
        // TODO add your handling code here:
        TelaCadCadastrar.apagarJFormatted(jNascimento, evt.getKeyCode());
    }//GEN-LAST:event_jNascimentoKeyPressed

    private void jCadastrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMouseClicked
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            //Pegando os valores da tabela
            DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
            String tabNome = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 1);
            String tabNasc = (String) (dtm.getValueAt(jCadastros.getSelectedRow(), 2));
            String tabSexo = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 3);
            String tabRg = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 4);
            String cpf = (String) dtm.getValueAt(jCadastros.getSelectedRow(), 5);
            String tabCpf = cpf.substring(0, 3) + cpf.substring(4, 7) + cpf.substring(8, 11) + cpf.substring(12, 14);

            jNome.setText(tabNome);
            jNascimento.setText(tabNasc);
            if (tabSexo.equals("Masculino")) {
                jSexoM.setSelected(true);
                jSexoF.setSelected(false);
            } else {
                jSexoF.setSelected(true);
                jSexoM.setSelected(false);
            }
            jRg.setText(tabRg);
            jCpf.setText(tabCpf);
        }
    }//GEN-LAST:event_jCadastrosMouseClicked

    private void jRgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRgKeyPressed
        // TODO add your handling code here:
        //deixar desabilitado
        jCpf.setEnabled(false);
        if (evt.getKeyCode() == KeyEvent.VK_BACKSPACE || evt.getKeyCode() == KeyEvent.VK_DELETE
                && jRg.getText().length() <= 1) {
            jCpf.setEnabled(true);
        }
        //Entrar com o enter
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            pesquisarEspecifico();
        }
    }//GEN-LAST:event_jRgKeyPressed

    private void jCadastrosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMouseReleased
        // TODO add your handling code here:
        if (evt.isPopupTrigger()) {
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jCadastrosMouseReleased

    private void jCadastrosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCadastrosMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCadastrosMousePressed

    private void jPanel12MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel12MouseReleased

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MousePressed

    private void jPanel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseReleased

    private void jPopupMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPopupMenu2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPopupMenu2MouseClicked

    private void abrirCadastroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrirCadastroMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_abrirCadastroMouseReleased

    private void abrirCadastroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrirCadastroMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_abrirCadastroMousePressed
    /**
     * Pega o valores da linha selecionada da JTable e formata nos conformes
     *
     * @return
     */
    private Digitadores getFormatedDigitadores() {
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        Digitadores digi = new Digitadores();
        int id = (int) (dtm.getValueAt(jCadastros.getSelectedRow(), 0)) - 1;

        String cpf = jCpf.getText();
        String newCpf = cpf.substring(0, 3) + cpf.substring(4, 7) + cpf.substring(8, 11) + cpf.substring(12, 14);

        String tabNome = jNome.getText();
        String tabNasc = jNascimento.getText();
        String tabSexo = jSexoM.isSelected() ? "M" : "F";
        String tabRg = jRg.getText();
        String tabCpf = newCpf;

        digi.setId(ids[id]);
        digi.setNome(tabNome);
        digi.setNascimento(tabNasc);
        digi.setSexo(tabSexo);
        digi.setRg(tabRg);
        digi.setCpf(tabCpf);
        digi.setContato(contato[id]);
        digi.setEndereco(endereco[id]);
        return digi;
    }

    private void abrirCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            Digitadores digi = getFormatedDigitadores();
            TelaVisualDigit tvd = new TelaVisualDigit(digi, false);
            getParent().add(tvd).setVisible(true);
        }
    }//GEN-LAST:event_abrirCadastroActionPerformed

    private void deletarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
            int id = (int) (dtm.getValueAt(jCadastros.getSelectedRow(), 0)) - 1;
            int cads = (int) (dtm.getValueAt(jCadastros.getSelectedRow(), 6));
            int escolha;

            //verifica se o digitador tem cadastro
            if (cads == 0) {
                escolha = JOptionPane.showConfirmDialog(this, "Este registro será apagado.\n\nDeseja realmente"
                        + " apagar este registro?", "Alerta", 0, JOptionPane.WARNING_MESSAGE);
            } else {
                escolha = JOptionPane.showConfirmDialog(this, "Este registro e todos os cadastros feitos por ele serão"
                        + " apagados.\n\nDeseja realmente apagar este registro?", "Alerta", 0, JOptionPane.WARNING_MESSAGE);
            }

            Digitadores digi = new Digitadores();
            DigitadoresBanco db = new DigitadoresBanco();
            digi.setId(ids[id]);

            if (escolha == 0) {

                if (db.deletar(digi)) {
                    Limpar();
                    JOptionPane.showMessageDialog(this, "Digitador e Registros deletados com sucesso.");
                } else {
                    JOptionPane.showConfirmDialog(this, "Não foi possível deletar este registro. Tente novamente.", "Erro", 0,
                            JOptionPane.ERROR_MESSAGE);
                }
            } else if (cads > 0) {
                escolha = JOptionPane.showConfirmDialog(this, "É possível transferir todos os registros feitos por este "
                        + "digitador para o seu domínio.\n\nDeseja fazer isso?", "Aviso", 0, JOptionPane.INFORMATION_MESSAGE);
                if (escolha == 0) {
                    if (db.passarRegistros(digi, adm)) {
                        JOptionPane.showConfirmDialog(this, "Tranferência realizada com sucesso.",
                                "Aviso", 0, JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showConfirmDialog(this, "Ocorreu um erro na tranferência. Tente novamente.",
                                "Erro", 0, JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        listDigi = null;
        makeTabela();
    }//GEN-LAST:event_deletarCadastroActionPerformed

    private void editarCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarCadastroActionPerformed
        // TODO add your handling code here:
        if (jCadastros.getSelectedRow() != -1) {
            Digitadores digi = getFormatedDigitadores();
            TelaVisualDigit tvd = new TelaVisualDigit(digi, true);
            getParent().add(tvd).setVisible(true);

            listDigi = null;
            Limpar();
        }
    }//GEN-LAST:event_editarCadastroActionPerformed
    /**
     * Limpa tudo que foi colocado nas caixas ou marcado
     */
    private void Limpar() {
        DefaultTableModel dtm = (DefaultTableModel) jCadastros.getModel();
        dtm.setRowCount(0);

        jNome.setText("");
        jNascimento.setValue(null);
        jSexoM.setSelected(false);
        jSexoF.setSelected(false);
        jRg.setText("");
        jCpf.setValue(null);
        jCpf.setEnabled(true);
        jRg.setEnabled(true);
    }

    private void jLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLimparActionPerformed
        // TODO add your handling code here:
        Limpar();
    }//GEN-LAST:event_jLimparActionPerformed

    private void jRgKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRgKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jRgKeyReleased

    private void jCpfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCpfKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jCpfKeyReleased

    private void jCpfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCpfKeyPressed
        // TODO add your handling code here:
        jRg.setEnabled(false);
        if (evt.getKeyCode() == KeyEvent.VK_BACKSPACE || evt.getKeyCode() == KeyEvent.VK_DELETE
                && (jCpf.getValue() != null || jCpf.getText().equals("   .   .   -  "))) {
            jRg.setEnabled(true);
        }
        TelaCadCadastrar.apagarJFormatted(jCpf, evt.getKeyCode());
    }//GEN-LAST:event_jCpfKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirCadastro;
    private javax.swing.JMenuItem deletarCadastro;
    private javax.swing.JMenuItem editarCadastro;
    private javax.swing.JTable jCadastros;
    private javax.swing.JFormattedTextField jCpf;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JButton jLimpar;
    private javax.swing.JFormattedTextField jNascimento;
    private javax.swing.JTextField jNome;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JButton jProcurar;
    private javax.swing.JTextField jRg;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JCheckBox jSexoF;
    private javax.swing.JCheckBox jSexoM;
    // End of variables declaration//GEN-END:variables
}
